using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text.RegularExpressions;
using Localization.Core;

namespace Localization.PCL
{
	public class LocalizationPCLTask : BaseLocalizationTask
	{
		private const string ENUM_FILE = Constants.ENUM_NAME + Constants.FILE_SUFFIX;
		private const string SERVICE_FILE = Constants.INTERFACE_SERVICE_NAME + Constants.FILE_SUFFIX;
		
		protected override void Generate(Dictionary<string, List<ResxFile>> files)
		{
			List<string> keys = new List<string>();

			foreach (ResxFile file in files.SelectMany(x => x.Value))
			{
				keys.AddRange(file.Content.Keys.Select(x => x.SimplifyKey()));
			}

			keys = keys.Distinct().ToList();

			GenerateEnumFields(keys);
			GenerateLocalizationService(keys);

			base.Generate(files);
		}
		
		protected virtual void GenerateEnumFields(List<string> keys)
		{
			CodeCompileUnit codeUnit = new CodeCompileUnit();
			
			// for class declaration
			CodeNamespace codeNamespace = new CodeNamespace(GenerationNamespace);

			codeUnit.Namespaces.Add(codeNamespace);
			
			// create class
			CodeTypeDeclaration enumDeclaration = new CodeTypeDeclaration(Constants.ENUM_NAME)
			{
				IsEnum = true,
				TypeAttributes = TypeAttributes.Public,
			};
			
			codeNamespace.Types.Add(enumDeclaration);

			enumDeclaration.Members.AddRange(keys.Select(key => (CodeTypeMember)new CodeMemberField(Constants.ENUM_NAME, key)).ToArray());
			
			CodeDomProvider provider = CodeDomProvider.CreateProvider("CSharp");
			CodeGeneratorOptions options = new CodeGeneratorOptions
			{
				BlankLinesBetweenMembers = false,
				BracingStyle = "C",
				IndentString = "\t"
			};

			string contentString;
			using (StringWriter stringWriter = new StringWriter())
			{
				provider.GenerateCodeFromCompileUnit(codeUnit, stringWriter, options);

				string content = stringWriter.GetStringBuilder().ToString();

				Regex commentRegex = new Regex("<auto-generated>.*</auto-generated>", RegexOptions.IgnoreCase | RegexOptions.Singleline);
				contentString = commentRegex.Replace(content, "This file was generated by Localization task for PCL");
			}

			if (File.Exists(ENUM_FILE))
			{
				using (StreamReader reader = new StreamReader(ENUM_FILE))
				{
					string actualContent = reader.ReadToEnd();
					if (actualContent == contentString)
					{
						return;
					}
				}
				File.Delete(ENUM_FILE);
			}

			using (StreamWriter writer = new StreamWriter(File.OpenWrite(ENUM_FILE)))
			{
				writer.Write(contentString);
			}
		}

		protected virtual void GenerateLocalizationService(List<string> keys)
		{
			CodeCompileUnit codeUnit = new CodeCompileUnit();

			// for class declaration
			CodeNamespace codeNamespace = new CodeNamespace(GenerationNamespace);

			codeUnit.Namespaces.Add(codeNamespace);

			// create class
			CodeTypeDeclaration interfaceDeclaration = new CodeTypeDeclaration(Constants.INTERFACE_SERVICE_NAME)
			{
				IsInterface = true,
				TypeAttributes = TypeAttributes.Interface | TypeAttributes.Public,
			};

			codeNamespace.Types.Add(interfaceDeclaration);

			var method = new CodeMemberMethod
			{
				Name = Constants.SERVICE_METHOD_NAME,
				ReturnType = new CodeTypeReference(typeof (string))
			};
			method.Parameters.Add(new CodeParameterDeclarationExpression(Constants.ENUM_NAME, "key"));
			interfaceDeclaration.Members.Add(method);
			
			CodeDomProvider provider = CodeDomProvider.CreateProvider("CSharp");
			CodeGeneratorOptions options = new CodeGeneratorOptions
			{
				BlankLinesBetweenMembers = false,
				BracingStyle = "C",
				IndentString = "\t"
			};

			string contentString;
			using (StringWriter stringWriter = new StringWriter())
			{
				provider.GenerateCodeFromCompileUnit(codeUnit, stringWriter, options);

				string content = stringWriter.GetStringBuilder().ToString();

				Regex commentRegex = new Regex("<auto-generated>.*</auto-generated>", RegexOptions.IgnoreCase | RegexOptions.Singleline);
				contentString = commentRegex.Replace(content, "This file was generated by Localization task for PCL");
			}

			if (File.Exists(SERVICE_FILE))
			{
				using (StreamReader reader = new StreamReader(SERVICE_FILE))
				{
					string actualContent = reader.ReadToEnd();
					if (actualContent == contentString)
					{
						return;
					}
				}
				File.Delete(SERVICE_FILE);
			}

			using (StreamWriter writer = new StreamWriter(File.OpenWrite(SERVICE_FILE)))
			{
				writer.Write(contentString);
			}
		}
	}
}
